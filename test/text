/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_system.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/24 19:11:49 by xjose             #+#    #+#             */
/*   Updated: 2024/09/24 20:12:21 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void init_args(t_system *sys, int argc, char **argv)
{
    sys->nb_philo = ft_atoi(argv[1]);
    sys->time_to_die = ft_atoi(argv[2]);
    sys->time_to_eat = ft_atoi(argv[3]);
    sys->time_to_sleep = ft_atoi(argv[4]);
    if (argc == 6)
        sys->eat_count = ft_atoi(argv[5]);
    else
        sys->eat_count = -1;
}

static void init_mutex(t_system *sys)
{
    int i;

    i = 0;
    sys->forks = malloc(sizeof(pthread_mutex_t) * sys->nb_philo);
    while (i < sys->nb_philo)
    {
        pthread_mutex_init(&sys->forks[i], NULL);
        i++;
    }
    pthread_mutex_init(&sys->state_mutex, NULL);
    pthread_mutex_init(&sys->print_mutex, NULL);
}

static void init_philos(t_system *sys)
{
    int i;
    long long time;

    i = 0;
    time = get_time_now();
    sys->philos = malloc(sizeof(t_philo) * sys->nb_philo);
    while (i < sys->nb_philo)
    {
        sys->philos[i].id = i + 1;
        sys->philos[i].nb_eat = 0;
        sys->philos[i].sys = sys;
        sys->philos[i].start_time = time;
        sys->philos[i].last_eat = time;
        sys->philos[i].left_fork = &sys->forks[i];
        sys->philos[i].right_fork = &sys->forks[(i + 1) % sys->nb_philo];
        pthread_create(&sys->philos[i].thread, NULL, &philo_routine, &sys->philos[i]);
        i++;
    }
}

void init_system(t_system *sys, int argc, char **argv)
{
    sys->state = RUN;
    init_args(sys, argc, argv);
    init_mutex(sys);
    init_philos(sys);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/24 19:30:09 by xjose             #+#    #+#             */
/*   Updated: 2024/09/24 20:12:44 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void start_system(t_system *sys)
{
    int i;

    i = 0;
    while (i < sys->nb_philo)
    {
        pthread_join(sys->philos[i].thread, NULL);
        i++;
    }
    free(sys->philos);
    free(sys->forks);
}

int main(int argc, char **argv)
{
    t_system sys;

    if (argc < 5 || argc > 6)
    {
        printf("Error: Invalid number of arguments\n");
        return (1);
    }
    init_system(&sys, argc, argv);
    start_system(&sys);
    return (0);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_states.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/24 19:36:43 by xjose             #+#    #+#             */
/*   Updated: 2024/09/24 20:28:15 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./philo.h"


void	philo_state_thinking(t_philo *philo)
{
	print_states(philo, "\033[0;32mis thinking\033[0m");
}

void	philo_state_pick_up_fork(t_philo *philo)
{
	if(philo->id % 2 == 0)
	{
		pthread_mutex_lock(philo->left_fork);
		print_states(philo, "\033[0;33mpick up left fork\033[0m");
		pthread_mutex_lock(philo->right_fork);
		print_states(philo, "\033[0;33mpick up right fork\033[0m");
	}
	else
	{
		pthread_mutex_lock(philo->right_fork);
		print_states(philo, "\033[0;33mpick up right fork\033[0m");
		pthread_mutex_lock(philo->left_fork);
		print_states(philo, "\033[0;33mpick up left fork\033[0m");
	}
}

void	philo_state_eating(t_philo *philo)
{
	philo->last_eat = get_time_now();
	print_states(philo, "\033[0;34m eating\033[0m");
	philo->nb_eat += 1;
	usleep(philo->sys->time_to_eat * 1000);
	pthread_mutex_unlock(philo->right_fork);
	pthread_mutex_unlock(philo->left_fork);
}

void	philo_state_sleeping(t_philo *philo)
{
	print_states(philo, "\033[0;36mis sleeping\033[0m");
	usleep(philo->sys->time_to_sleep * 1000);
}


void   *philo_routine(void *arg)
{
    t_philo *philo;
	pthread_t       deadth_thread;

    philo = (t_philo *)arg;
	pthread_create(&deadth_thread, NULL, &deadth_routine, philo);
	pthread_detach(deadth_thread);
    while (philo->sys->eat_count == -1 || philo->nb_eat < philo->sys->eat_count)
    {
		if(is_dead(philo, 0) == 1)
			return (NULL);
        philo_state_thinking(philo);
		philo_state_pick_up_fork(philo);
		philo_state_eating(philo);
		philo_state_sleeping(philo);
    }
    return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/24 19:17:33 by xjose             #+#    #+#             */
/*   Updated: 2024/09/24 20:28:44 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./philo.h"


long long	get_time_now(void)
{
	struct timeval	timer;

	gettimeofday(&timer, NULL);
	return (timer.tv_sec * 1000 + timer.tv_usec / 1000);
}

long long	time_ms(t_philo *philo)
{
	return (get_time_now() - philo->start_time);
}

void	print_states(t_philo *philo, char *states)
{
	pthread_mutex_lock(&philo->sys->print_mutex);
	if (philo->sys->state == RUN)
	{
		printf("TIME[\033[0;33m%lld\033[0m]", time_ms(philo));
		printf("\t{%d}\t%s\t\n", philo->id, states);
	}
	pthread_mutex_unlock(&philo->sys->print_mutex);
}

int	is_dead(t_philo *philo, int nb)
{
	pthread_mutex_lock(&philo->sys->state_mutex);
	if (nb)
		philo->sys->state = STOP;
	if (philo->sys->state == STOP)
	{
		pthread_mutex_unlock(&philo->sys->state_mutex);
		return (1);
	}
	pthread_mutex_unlock(&philo->sys->state_mutex);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/24 19:21:54 by xjose             #+#    #+#             */
/*   Updated: 2024/09/24 20:30:54 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./philo.h"


void    *deadth_routine(void *arg)
{
    t_philo *philo;

    philo = (t_philo *)arg;
    while (1)
    {
        if (is_dead(philo, 0))
            return (NULL);
        pthread_mutex_lock(&philo->sys->state_mutex);
        if (get_time_now() - philo->last_eat >= philo->sys->time_to_die)
        {
            print_states(philo, "CUBOU");
            is_dead(philo, 1);
        }
        pthread_mutex_unlock(&philo->sys->state_mutex);
        usleep(1000);
    } 
    return (NULL);
}



/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: xjose <xjose@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/28 08:44:26 by xjose             #+#    #+#             */
/*   Updated: 2024/09/24 15:20:17 by xjose            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "./philo.h"

static int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return 1;
	return 0;
}

static int	ft_isspace(int c)
{
	return (c == ' ' || (c >= '\t' && c <= '\r'));
}

int	ft_atoi(const char *nptr)
{
	int			sign;
	long long	nbr;

	sign = 1;
	nbr = 0;
	while (ft_isspace(*nptr))
		nptr++;
	if (*nptr == '-')
		sign = -1;
	if (*nptr == '-' || *nptr == '+')
	{
		++nptr;
	}
	while (ft_isdigit(*nptr))
	{
		nbr = (nbr * 10) + (*nptr - '0');
		nptr++;
	}
	return (nbr * sign);
}

// void	x_usleep(t_philo *philo, int time_x)
// {
// 	int i;

// 	i = 0;
// 	while (i < (time_x / 2))
// 	{
// 		if (!philo_dead(philo))
// 			break;
// 		usleep(2000);
// 		i++;
// 	}
// }
